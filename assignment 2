#include <iostream>
using std::cout;
using std::endl;

template <class T>
class Queue {

private:
	int head; //top of queue
	int tail; //back of queue
	int size; //size of queue
	T* QueuePtr;  //queue for pointer

public:
	Queue(int); //constructor
	~Queue(); //destructor

	bool Enque(const int&); // push objects in queue from back 
	bool Deque(int&); //  pop objects from queue top

	bool IsFull(); // if queue is full
	bool IsEmpty(); // check if queue is empty

	void Peek(); // element of queue

};
template <class T> //constructor
Queue<T>::Queue(int s)
{
	size = s > 0 ? s : 10 ;
	head = -1;
	tail = -1;

	QueuePtr = new T[s];

}

template <class T>
Queue<T>::~Queue() { delete[]QueuePtr; } //destructor

template <class T>
bool Queue<T>::IsEmpty() { return head == 0; }

template <class T>
bool Queue<T>::IsFull() { return head == size - 1; }

template <class T>
bool Queue<T>::Enque(const int& EnqValue)
{
	if (!IsFull())
	{
		QueuePtr[++head] = EnqValue;


		return true;
	}
	return false;
}
template <class T>
bool Queue<T>::Deque(int& DeqValue)
{
	if (!IsEmpty())
	{
		DeqValue = 10 - (QueuePtr[head--]);

		return true;
	}
	return false;
}
template <class T>
void Queue<T>::Peek()
{
	cout << "The peek is: " << size - (head) << endl;
}

int main()
{
	Queue <int> theQueue(9);
	int a = 1;

	cout << "Enque of the queue" << endl;

	while (theQueue.Enque(a))
	{
		cout << a << '\t';
		a += 1;


	}

	cout << "Queue is full,cannot push " << a << endl;
	theQueue.Peek();



	cout << "Deque of the queue" << endl;

	while (theQueue.Deque(a))
	{
		cout << a << '\t';

	}
	cout << endl;
	theQueue.Peek();

	cout << "\nThe queue is empty, cannot deque" << endl;
}
